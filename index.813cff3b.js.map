{"mappings":"AAAO,MAAMA,EAAO,CAChBC,KAAMC,SAASC,cAAc,cAC7BC,SAAUF,SAASC,cAAc,eCF9B,SAASE,EAAIC,GAClB,MAAMC,EAAQC,IACdD,EAAME,KAAKH,GACXI,aAAaC,QAAQ,QAASC,KAAKC,UAAUN,G,CAGxC,SAASC,IACd,OAAOI,KAAKE,MAAMJ,aAAaK,QAAQ,WAAa,E,CCP/C,SAASC,EAAiBV,GAC/B,MAAO,+GAGKA,EAAaW,6BACdX,EAAaY,0B,CCJnB,IAkBIC,EAAS,CAACC,EAAO,KAC1BC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,CAACC,EAAIC,IAGrDD,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,KAGP,IC9BE,SAASG,EAAWC,GACzB,MAAMxB,EAAe,CAAEmB,GAAIN,KAI3B,OAHA,IAAIY,SAASD,EAAME,eAAeC,SAAQ,CAACC,EAAGC,KAC5C7B,EAAa6B,GAAKD,CAAC,IAEd5B,C,CCcTN,EAAKI,SAASgC,UAA8B5B,IHX1BgB,QAAO,CAACa,EAAKC,IAASD,EAAMrB,EAAiBsB,IAAO,IGatEtC,EAAKC,KAAKsC,iBAAiB,UClBpB,SAAwBT,GAC7BA,EAAMU,iBACN,MAAMlC,EAAeuB,EAAWC,GAEhC9B,EAAKC,KAAKwC,QAEVpC,EAAIC,GAEJ,MAAMoC,EAAS1B,EAAiBV,GAChCN,EAAKI,SAASuC,mBAAmB,YAAaD,E","sources":["src/js/refs.js","src/js/localstorageAPI.js","src/js/createMarkup.js","node_modules/nanoid/index.browser.js","src/js/createNote.js","src/index.js","src/js/formEvents.js"],"sourcesContent":["export const refs = {\n    form: document.querySelector('#task-form'),\n    taskList: document.querySelector('#task-list'),\n}\n","export function add(submitObject) {\n  const notes = getAllNotes();\n  notes.push(submitObject);\n  localStorage.setItem('notes', JSON.stringify(notes));\n}\n\nexport function getAllNotes() {\n  return JSON.parse(localStorage.getItem('notes')) || [];\n}\n","export function createNoteMarkup(submitObject) {\n  return `\n    <li class=\"task-list-item\">\n        <button class=\"task-list-item-btn\">Удалить</button>\n        <h3>${submitObject.taskName}</h3>\n        <p>${submitObject.taskText}</p>\n     </li>`;\n}\n\nexport function createNotesMarkup(notesArr) {\n  return notesArr.reduce((acc, elem) => acc + createNoteMarkup(elem), '');\n}\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { nanoid } from 'nanoid';\n\nexport function createNote(event) {\n  const submitObject = { id: nanoid() };\n  new FormData(event.currentTarget).forEach((e, i) => {\n    submitObject[i] = e;\n  });\n  return submitObject;\n}\n","/**\n * Створи список справ.\n * На сторінці є два інпути які має вводиться назва і текст задачі.\n * Після натискання на кнопку \"Додати\" завдання додається до списку #task-list.\n *\n * Розмітка картки задачі\n * <li class=\"task-list-item\">\n *     <button class=\"task-list-item-btn\">Удалить</button>\n *     <h3>Заголовок</h3>\n *     <p>Текст</p>\n * </li>\n *\n * У кожної картки має бути кнопка \"Видалити\", щоб можна було\n * прибрати завдання зі списку.\n * Список із завданнями має бути доступним після перезавантаження сторінки.\n */\nimport { refs } from './js/refs';\nimport { getAllNotes } from './js/localstorageAPI';\nimport { createNotesMarkup } from './js/createMarkup';\nimport { submitMainForm } from './js/formEvents';\n\nrefs.taskList.innerHTML = createNotesMarkup(getAllNotes());\n\nrefs.form.addEventListener('submit', submitMainForm);\n","import { refs } from './refs';\nimport { add } from './localstorageAPI';\nimport { createNoteMarkup } from './createMarkup';\nimport { createNote } from './createNote';\n\nexport function submitMainForm(event) {\n  event.preventDefault();\n  const submitObject = createNote(event);\n\n  refs.form.reset();\n\n  add(submitObject);\n\n  const markup = createNoteMarkup(submitObject);\n  refs.taskList.insertAdjacentHTML('beforeend', markup);\n}\n"],"names":["$ee27a4d7c64fc8c4$export$21666b427502ea6d","form","document","querySelector","taskList","$6778338a39a4a4f6$export$e16d8520af44a096","submitObject","notes","$6778338a39a4a4f6$export$a715f96f684afabc","push","localStorage","setItem","JSON","stringify","parse","getItem","$bb2db7a89a40ba72$export$194e3972f879bfde","taskName","taskText","$cf399e049a9c4d34$export$ac4959f4f1338dfc","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","$d4daa78a533cd9de$export$4640c0d5ffcf906e","event","FormData","currentTarget","forEach","e","i","innerHTML","acc","elem","addEventListener","preventDefault","reset","markup","insertAdjacentHTML"],"version":3,"file":"index.813cff3b.js.map"}